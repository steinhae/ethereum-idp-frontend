package de.tum.repairchain.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.0.
 */
public final class Report_sol_Repairchain extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b5b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b613ab3806100636000396000f3006060604052361562000161576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301d397131462000166578063027cb02c14620001f657806304d7e8b8146200028257806310b26fab146200037757806310eb050714620003eb578063131c64ac146200047b5780631bd75ce314620005335780633a083035146200069f5780633b85089914620007945780633d3426b3146200084f57806341c0e1b514620009075780635e5e1678146200091f578063667e48e71462000a145780636aed72701462000b09578063715fd8701462000b81578063a52d11b91462000c76578063aed003451462000d6b578063ba176d1d1462000e60578063c43a5d231462000ed8578063dc6493bf1462000fcd578063e28d586914620010c2578063e372631a14620011b7578063e9d933fe1462001247578063ea451bb614620012d3578063ec2dcf0f146200138b575b600080fd5b34156200017257600080fd5b620001dc600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001417565b604051808215151515815260200191505060405180910390f35b34156200020257600080fd5b6200026c600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620014b6565b6040518082815260200191505060405180910390f35b34156200028e57600080fd5b620002f8600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001555565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156200033b5780820151818401525b6020810190506200031d565b50505050905090810190601f168015620003695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200038357600080fd5b620003d5600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506200160c565b6040518082815260200191505060405180910390f35b3415620003f757600080fd5b62000461600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001688565b604051808215151515815260200191505060405180910390f35b34156200048757600080fd5b620004f1600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001727565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200053f57600080fd5b6200069d600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050620018f4565b005b3415620006ab57600080fd5b62000715600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001b37565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620007585780820151818401525b6020810190506200073a565b50505050905090810190601f168015620007865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415620007a057600080fd5b6200084d600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505062001bee565b005b34156200085b57600080fd5b620008c5600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001cbe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200091357600080fd5b6200091d62001d5d565b005b34156200092b57600080fd5b62000995600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001df0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620009d85780820151818401525b602081019050620009ba565b50505050905090810190601f16801562000a065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000a2057600080fd5b62000a8a600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001ea7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000acd5780820151818401525b60208101905062000aaf565b50505050905090810190601f16801562000afb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000b1557600080fd5b62000b7f600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001f5e565b005b341562000b8d57600080fd5b62000bf7600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff19169060200190919050506200201e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000c3a5780820151818401525b60208101905062000c1c565b50505050905090810190601f16801562000c685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000c8257600080fd5b62000cec600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620020d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000d2f5780820151818401525b60208101905062000d11565b50505050905090810190601f16801562000d5d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000d7757600080fd5b62000de1600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff19169060200190919050506200218c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000e245780820151818401525b60208101905062000e06565b50505050905090810190601f16801562000e525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000e6c57600080fd5b62000ed6600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002243565b005b341562000ee457600080fd5b62000f4e600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002303565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000f915780820151818401525b60208101905062000f73565b50505050905090810190601f16801562000fbf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000fd957600080fd5b62001043600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620023ba565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620010865780820151818401525b60208101905062001068565b50505050905090810190601f168015620010b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415620010ce57600080fd5b62001138600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002471565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156200117b5780820151818401525b6020810190506200115d565b50505050905090810190601f168015620011a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415620011c357600080fd5b6200122d600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002528565b604051808215151515815260200191505060405180910390f35b34156200125357600080fd5b620012bd600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620025c7565b6040518082815260200191505060405180910390f35b3415620012df57600080fd5b62001331600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505062002666565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015620013775780820151818401525b60208101905062001359565b505050509050019250505060405180910390f35b34156200139757600080fd5b62001401600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002984565b6040518082815260200191505060405180910390f35b600062001425838362001727565b73ffffffffffffffffffffffffffffffffffffffff166314a506ec6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200149157600080fd5b6102c65a03f11515620014a357600080fd5b5050506040518051905090505b92915050565b6000620014c4838362001727565b73ffffffffffffffffffffffffffffffffffffffff1663188ec3566000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200153057600080fd5b6102c65a03f115156200154257600080fd5b5050506040518051905090505b92915050565b6200155f62002c34565b60006200156d848462001727565b73ffffffffffffffffffffffffffffffffffffffff1663ac79152c6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620015d957600080fd5b6102c65a03f11515620015eb57600080fd5b505050604051805190509050620016028162002a23565b91505b5092915050565b60006001826040518082805190602001908083835b6020831015156200164957805182525b60208201915060208101905060208303925062001621565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054905090505b919050565b600062001696838362001727565b73ffffffffffffffffffffffffffffffffffffffff1663c2b7a25e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200170257600080fd5b6102c65a03f115156200171457600080fd5b5050506040518051905090505b92915050565b60008060006001856040518082805190602001908083835b6020831015156200176757805182525b6020820191506020810190506020830392506200173f565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209150600090505b8180549050811015620018eb57836bffffffffffffffffffffffff19168282815481101515620017cd57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d1ca6316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200186657600080fd5b6102c65a03f115156200187857600080fd5b505050604051805190506bffffffffffffffffffffffff19161415620018dc578181815481101515620018a757fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250620018ec565b5b8080600101915050620017a1565b5b505092915050565b60008060008060008060008060006200190f8d600162002c1d565b98506200191e8d600262002c1d565b97506200192d8c600162002c1d565b96506200193c8b600162002c1d565b95506200194b8a600162002c1d565b94506200195a8a600262002c1d565b9350620019698a600362002c1d565b9250620019788a600462002c1d565b91503389898989898989896200198d62002c48565b808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001896000191660001916815260200188600019166000191681526020018760001916600019168152602001866000191660001916815260200185600019166000191681526020018460001916600019168152602001836000191660001916815260200182600019166000191681526020019950505050505050505050604051809103906000f080151562001a5257600080fd5b905060018e6040518082805190602001908083835b60208310151562001a8f57805182525b60208201915060208101905060208303925062001a67565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480600101828162001ad6919062002c59565b916000526020600020900160005b83909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b5050505050505050505050505050565b62001b4162002c34565b600062001b4f848462001727565b73ffffffffffffffffffffffffffffffffffffffff16635e6a43116000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001bbb57600080fd5b6102c65a03f1151562001bcd57600080fd5b50505060405180519050905062001be48162002a23565b91505b5092915050565b60008062001bfe83600162002c1d565b915062001c0d83600262002c1d565b905062001c1b858562001727565b73ffffffffffffffffffffffffffffffffffffffff16632403d11f83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050600060405180830381600087803b151562001ca157600080fd5b6102c65a03f1151562001cb357600080fd5b5050505b5050505050565b600062001ccc838362001727565b73ffffffffffffffffffffffffffffffffffffffff1663ad9914f86000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001d3857600080fd5b6102c65a03f1151562001d4a57600080fd5b5050506040518051905090505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141562001ded576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b62001dfa62002c34565b600062001e08848462001727565b73ffffffffffffffffffffffffffffffffffffffff1663675c97696000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001e7457600080fd5b6102c65a03f1151562001e8657600080fd5b50505060405180519050905062001e9d8162002a23565b91505b5092915050565b62001eb162002c34565b600062001ebf848462001727565b73ffffffffffffffffffffffffffffffffffffffff166366493ac96000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001f2b57600080fd5b6102c65a03f1151562001f3d57600080fd5b50505060405180519050905062001f548162002a23565b91505b5092915050565b62001f6a828262001727565b73ffffffffffffffffffffffffffffffffffffffff166353c98a20336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15156200200457600080fd5b6102c65a03f115156200201657600080fd5b5050505b5050565b6200202862002c34565b600062002036848462001727565b73ffffffffffffffffffffffffffffffffffffffff166379b4d3796000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620020a257600080fd5b6102c65a03f11515620020b457600080fd5b505050604051805190509050620020cb8162002a23565b91505b5092915050565b620020df62002c34565b6000620020ed848462001727565b73ffffffffffffffffffffffffffffffffffffffff1663ae7b6bd96000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200215957600080fd5b6102c65a03f115156200216b57600080fd5b505050604051805190509050620021828162002a23565b91505b5092915050565b6200219662002c34565b6000620021a4848462001727565b73ffffffffffffffffffffffffffffffffffffffff16630d40c8706000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200221057600080fd5b6102c65a03f115156200222257600080fd5b505050604051805190509050620022398162002a23565b91505b5092915050565b6200224f828262001727565b73ffffffffffffffffffffffffffffffffffffffff1663bcaee25a336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1515620022e957600080fd5b6102c65a03f11515620022fb57600080fd5b5050505b5050565b6200230d62002c34565b60006200231b848462001727565b73ffffffffffffffffffffffffffffffffffffffff16637a6384ac6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200238757600080fd5b6102c65a03f115156200239957600080fd5b505050604051805190509050620023b08162002a23565b91505b5092915050565b620023c462002c34565b6000620023d2848462001727565b73ffffffffffffffffffffffffffffffffffffffff1663810bfeda6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200243e57600080fd5b6102c65a03f115156200245057600080fd5b505050604051805190509050620024678162002a23565b91505b5092915050565b6200247b62002c34565b600062002489848462001727565b73ffffffffffffffffffffffffffffffffffffffff166355b72f386000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620024f557600080fd5b6102c65a03f115156200250757600080fd5b5050506040518051905090506200251e8162002a23565b91505b5092915050565b600062002536838362001727565b73ffffffffffffffffffffffffffffffffffffffff16639041da7e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620025a257600080fd5b6102c65a03f11515620025b457600080fd5b5050506040518051905090505b92915050565b6000620025d5838362001727565b73ffffffffffffffffffffffffffffffffffffffff166391f78e4c6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200264157600080fd5b6102c65a03f115156200265357600080fd5b5050506040518051905090505b92915050565b6200267062002c88565b6000806001846040518082805190602001908083835b602083101515620026ae57805182525b60208201915060208101905060208303925062002686565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209150600090505b818054905081101562002893576002846040518082805190602001908083835b6020831015156200273057805182525b60208201915060208101905060208303925062002708565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480600101828162002777919062002c9c565b916000526020600020900160005b84848154811015156200279457fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d1ca6316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200282d57600080fd5b6102c65a03f115156200283f57600080fd5b50505060405180519050909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c0100000000000000000000000090040217905550505b8080600101915050620026e8565b6002846040518082805190602001908083835b602083101515620028ce57805182525b602082019150602081019050602083039250620028a6565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054806020026020016040519081016040528092919081815260200182805480156200297557602002820191906000526020600020905b8160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19168152602001906001019080831162002938575b505050505092505b5050919050565b600062002992838362001727565b73ffffffffffffffffffffffffffffffffffffffff1663050f97496000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620029fe57600080fd5b6102c65a03f1151562002a1057600080fd5b5050506040518051905090505b92915050565b62002a2d62002c34565b62002a3762002ccb565b600080600062002a4662002ccb565b602060405180591062002a565750595b908082528060200260200182016040525b50945060009350600092505b602083101562002b36578260080260020a876001900402600102915060007f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151562002b275781858581518110151562002aee57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535083806001019450505b5b828060010193505062002a73565b8360405180591062002b455750595b908082528060200260200182016040525b509050600092505b8383101562002c0f57848381518110151562002b7657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002818481518110151562002bd057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b828060010193505062002b5e565b8095505b5050505050919050565b6000808260200290508084015191505b5092915050565b602060405190810160405280600081525090565b604051610d808062002d0883390190565b81548183558181151162002c835781836000526020600020918201910162002c82919062002cdf565b5b505050565b602060405190810160405280600081525090565b81548183558181151162002cc65781836000526020600020918201910162002cc5919062002cdf565b5b505050565b602060405190810160405280600081525090565b62002d0491905b8082111562002d0057600081600090555060010162002ce6565b5090565b9056006060604052341561000f57600080fd5b60405161012080610d80833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b8585896000357fffffffff000000000000000000000000000000000000000000000000000000001633600143034060405180876000191660001916815260200186600019166000191681526020018560001916600019168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018260001916600019168152602001965050505050505060405180910390206000806101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055504260018190555088600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550876004816000191690555086600581600019169055506000600660006101000a81548160ff021916908315150217905550856007816000191690555084600881600019169055506000600d60006101000a81548160ff021916908315150217905550836009816000191690555082600a816000191690555081600b816000191690555080600c81600019169055505b5050505050505050505b610ae38061029d6000396000f3006060604052361561011b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063050f9749146101205780630d40c8701461014957806314a506ec1461017a578063188ec356146101a75780632403d11f146101d057806353c98a201461020457806355b72f381461023d5780635d1ca6311461026e5780635e6a4311146102b557806366493ac9146102e6578063675c97691461031757806379b4d379146103485780637a6384ac14610379578063810bfeda146103aa5780639041da7e146103db57806391f78e4c14610408578063ac79152c14610431578063ad9914f814610462578063ae7b6bd9146104b7578063bcaee25a146104e8578063c2b7a25e14610521575b600080fd5b341561012b57600080fd5b61013361054e565b6040518082815260200191505060405180910390f35b341561015457600080fd5b61015c61055c565b60405180826000191660001916815260200191505060405180910390f35b341561018557600080fd5b61018d610567565b604051808215151515815260200191505060405180910390f35b34156101b257600080fd5b6101ba61057f565b6040518082815260200191505060405180910390f35b34156101db57600080fd5b6102026004808035600019169060200190919080356000191690602001909190505061058a565b005b341561020f57600080fd5b61023b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610617565b005b341561024857600080fd5b6102506107cf565b60405180826000191660001916815260200191505060405180910390f35b341561027957600080fd5b6102816107da565b60405180826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200191505060405180910390f35b34156102c057600080fd5b6102c86107fd565b60405180826000191660001916815260200191505060405180910390f35b34156102f157600080fd5b6102f9610808565b60405180826000191660001916815260200191505060405180910390f35b341561032257600080fd5b61032a610813565b60405180826000191660001916815260200191505060405180910390f35b341561035357600080fd5b61035b61081e565b60405180826000191660001916815260200191505060405180910390f35b341561038457600080fd5b61038c610829565b60405180826000191660001916815260200191505060405180910390f35b34156103b557600080fd5b6103bd610834565b60405180826000191660001916815260200191505060405180910390f35b34156103e657600080fd5b6103ee61083f565b604051808215151515815260200191505060405180910390f35b341561041357600080fd5b61041b610857565b6040518082815260200191505060405180910390f35b341561043c57600080fd5b610444610865565b60405180826000191660001916815260200191505060405180910390f35b341561046d57600080fd5b610475610870565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104c257600080fd5b6104ca61089b565b60405180826000191660001916815260200191505060405180910390f35b34156104f357600080fd5b61051f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108a6565b005b341561052c57600080fd5b610534610a4e565b604051808215151515815260200191505060405180910390f35b600060108054905090505b90565b600060045490505b90565b6000600d60009054906101000a900460ff1690505b90565b600060015490505b90565b600660009054906101000a900460ff1615610612576001600d60006101000a81548160ff02191690831515021790555081600e816000191690555080600f816000191690555033600d60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b600080600d60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561067d57506005601080549050105b80156106955750600d60009054906101000a900460ff165b156107c957600091505b601080549050811015610732578273ffffffffffffffffffffffffffffffffffffffff166010828154811015156106d257fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156107245760019150610732565b5b808060010191505061069f565b8115156107c8576010805480600101828161074d9190610a66565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600560108054905014156107c7576001601160006101000a81548160ff0219169083151502179055505b5b5b5b505050565b600060075490505b90565b60008060009054906101000a90046c010000000000000000000000000290505b90565b6000600b5490505b90565b6000600a5490505b90565b600060095490505b90565b600060055490505b90565b6000600f5490505b90565b6000600e5490505b90565b6000600660009054906101000a900460ff1690505b90565b600060038054905090505b90565b6000600c5490505b90565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b600060085490505b90565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156109145750600660009054906101000a900460ff16155b15610a4857600091505b6003805490508110156109b1578273ffffffffffffffffffffffffffffffffffffffff1660038281548110151561095157fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109a357600191506109b1565b5b808060010191505061091e565b811515610a4757600380548060010182816109cc9190610a66565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060056003805490501415610a46576001600660006101000a81548160ff0219169083151502179055505b5b5b5b505050565b6000601160009054906101000a900460ff1690505b90565b815481835581811511610a8d57818360005260206000209182019101610a8c9190610a92565b5b505050565b610ab491905b80821115610ab0576000816000905550600101610a98565b5090565b905600a165627a7a723058204a2587b65e6cfbef1a6ff154f10857dbdd1c086577b084f5e45495de0e7edd8c0029a165627a7a723058201589ea12dca3a0c1c6e9f427e467c91139e0468621f935ebc5ea923e6ff51c330029";

    private Report_sol_Repairchain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Report_sol_Repairchain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<Bool> getFixedReport(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedReport", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getTimestamp(Utf8String city, Bytes20 id) {
        Function function = new Function("getTimestamp", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getDescription4(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription4", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getReportsLengthOfCity(Utf8String city) {
        Function function = new Function("getReportsLengthOfCity", 
                Arrays.<Type>asList(city), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> getEnoughFixConfirmations(Utf8String city, Bytes20 id) {
        Function function = new Function("getEnoughFixConfirmations", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Address> getReport(Utf8String city, Bytes20 id) {
        Function function = new Function("getReport", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addReportToCity(Utf8String city, Utf8String pictureHash, Utf8String longitude, Utf8String latitude, Utf8String description) {
        Function function = new Function("addReportToCity", Arrays.<Type>asList(city, pictureHash, longitude, latitude, description), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getDescription3(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription3", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> reportFix(Utf8String city, Bytes20 id, Utf8String pictureHash) {
        Function function = new Function("reportFix", Arrays.<Type>asList(city, id, pictureHash), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> getReporter(Utf8String city, Bytes20 id) {
        Function function = new Function("getReporter", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> kill() {
        Function function = new Function("kill", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getDescription1(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getDescription2(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addFixConfirmationToReport(Utf8String city, Bytes20 id) {
        Function function = new Function("addFixConfirmationToReport", Arrays.<Type>asList(city, id), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getPictureHash2(Utf8String city, Bytes20 id) {
        Function function = new Function("getPictureHash2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getLatitude(Utf8String city, Bytes20 id) {
        Function function = new Function("getLatitude", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getPictureHash1(Utf8String city, Bytes20 id) {
        Function function = new Function("getPictureHash1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addConfirmationToReport(Utf8String city, Bytes20 id) {
        Function function = new Function("addConfirmationToReport", Arrays.<Type>asList(city, id), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getFixedPictureHash2(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedPictureHash2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getFixedPictureHash1(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedPictureHash1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getLongitude(Utf8String city, Bytes20 id) {
        Function function = new Function("getLongitude", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> getEnoughConfirmations(Utf8String city, Bytes20 id) {
        Function function = new Function("getEnoughConfirmations", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getConfirmationCount(Utf8String city, Bytes20 id) {
        Function function = new Function("getConfirmationCount", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<DynamicArray<Bytes20>> getReportIdsFromCity(Utf8String city) {
        Function function = new Function("getReportIdsFromCity", 
                Arrays.<Type>asList(city), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes20>>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getFixConfirmationCount(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixConfirmationCount", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<Report_sol_Repairchain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Report_sol_Repairchain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Report_sol_Repairchain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Report_sol_Repairchain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Report_sol_Repairchain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Report_sol_Repairchain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Report_sol_Repairchain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Report_sol_Repairchain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
