package de.tum.repairchain.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticArray;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.0.
 */
public final class Report_sol_Repairchain extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b5b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b613946806100636000396000f3006060604052361562000161576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301d397131462000166578063027cb02c14620001f657806304d7e8b814620002825780630b7df393146200037757806310b26fab146200041f57806310eb05071462000493578063131c64ac14620005235780631bd75ce314620005db5780633a08303514620007475780633b850899146200083c5780633d3426b314620008f757806341c0e1b514620009af5780635e5e167814620009c7578063667e48e71462000abc5780636aed72701462000bb1578063715fd8701462000c29578063a52d11b91462000d1e578063aed003451462000e13578063ba176d1d1462000f08578063c43a5d231462000f80578063dc6493bf1462001075578063e28d5869146200116a578063e372631a146200125f578063e9d933fe14620012ef578063ec2dcf0f146200137b575b600080fd5b34156200017257600080fd5b620001dc600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001407565b604051808215151515815260200191505060405180910390f35b34156200020257600080fd5b6200026c600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620014a6565b6040518082815260200191505060405180910390f35b34156200028e57600080fd5b620002f8600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001545565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156200033b5780820151818401525b6020810190506200031d565b50505050905090810190601f168015620003695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200038357600080fd5b620003de600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050620015fc565b6040518082606460200280838360005b838110156200040c5780820151818401525b602081019050620003ee565b5050505090500191505060405180910390f35b34156200042b57600080fd5b6200047d600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050620017c7565b6040518082815260200191505060405180910390f35b34156200049f57600080fd5b62000509600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001843565b604051808215151515815260200191505060405180910390f35b34156200052f57600080fd5b62000599600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620018e2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415620005e757600080fd5b62000745600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505062001aaf565b005b34156200075357600080fd5b620007bd600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001cf2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620008005780820151818401525b602081019050620007e2565b50505050905090810190601f1680156200082e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200084857600080fd5b620008f5600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505062001da9565b005b34156200090357600080fd5b6200096d600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001e79565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415620009bb57600080fd5b620009c562001f18565b005b3415620009d357600080fd5b62000a3d600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001fab565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000a805780820151818401525b60208101905062000a62565b50505050905090810190601f16801562000aae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000ac857600080fd5b62000b32600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002062565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000b755780820151818401525b60208101905062000b57565b50505050905090810190601f16801562000ba35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000bbd57600080fd5b62000c27600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002119565b005b341562000c3557600080fd5b62000c9f600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620021d9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000ce25780820151818401525b60208101905062000cc4565b50505050905090810190601f16801562000d105780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000d2a57600080fd5b62000d94600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002290565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000dd75780820151818401525b60208101905062000db9565b50505050905090810190601f16801562000e055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000e1f57600080fd5b62000e89600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002347565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000ecc5780820151818401525b60208101905062000eae565b50505050905090810190601f16801562000efa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000f1457600080fd5b62000f7e600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620023fe565b005b341562000f8c57600080fd5b62000ff6600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620024be565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620010395780820151818401525b6020810190506200101b565b50505050905090810190601f168015620010675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200108157600080fd5b620010eb600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002575565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156200112e5780820151818401525b60208101905062001110565b50505050905090810190601f1680156200115c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200117657600080fd5b620011e0600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff19169060200190919050506200262c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620012235780820151818401525b60208101905062001205565b50505050905090810190601f168015620012515780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200126b57600080fd5b620012d5600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620026e3565b604051808215151515815260200191505060405180910390f35b3415620012fb57600080fd5b62001365600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002782565b6040518082815260200191505060405180910390f35b34156200138757600080fd5b620013f1600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002821565b6040518082815260200191505060405180910390f35b6000620014158383620018e2565b73ffffffffffffffffffffffffffffffffffffffff166314a506ec6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200148157600080fd5b6102c65a03f115156200149357600080fd5b5050506040518051905090505b92915050565b6000620014b48383620018e2565b73ffffffffffffffffffffffffffffffffffffffff1663188ec3566000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200152057600080fd5b6102c65a03f115156200153257600080fd5b5050506040518051905090505b92915050565b6200154f62002ad1565b60006200155d8484620018e2565b73ffffffffffffffffffffffffffffffffffffffff1663ac79152c6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620015c957600080fd5b6102c65a03f11515620015db57600080fd5b505050604051805190509050620015f281620028c0565b91505b5092915050565b6200160662002ae5565b60006200161262002ae5565b6000806001876040518082805190602001908083835b6020831015156200165057805182525b60208201915060208101905060208303925062001628565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902093506064866064020191506064860290505b838054905081108015620016a857508181105b15620017b9578381815481101515620016bd57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d1ca6316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200175657600080fd5b6102c65a03f115156200176857600080fd5b5050506040518051905083826064811015156200178157fe5b60200201906bffffffffffffffffffffffff191690816bffffffffffffffffffffffff1916815250505b808060010191505062001695565b8294505b5050505092915050565b60006001826040518082805190602001908083835b6020831015156200180457805182525b602082019150602081019050602083039250620017dc565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054905090505b919050565b6000620018518383620018e2565b73ffffffffffffffffffffffffffffffffffffffff1663c2b7a25e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620018bd57600080fd5b6102c65a03f11515620018cf57600080fd5b5050506040518051905090505b92915050565b60008060006001856040518082805190602001908083835b6020831015156200192257805182525b602082019150602081019050602083039250620018fa565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209150600090505b818054905081101562001aa657836bffffffffffffffffffffffff191682828154811015156200198857fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d1ca6316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001a2157600080fd5b6102c65a03f1151562001a3357600080fd5b505050604051805190506bffffffffffffffffffffffff1916141562001a9757818181548110151562001a6257fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925062001aa7565b5b80806001019150506200195c565b5b505092915050565b600080600080600080600080600062001aca8d600162002aba565b985062001ad98d600262002aba565b975062001ae88c600162002aba565b965062001af78b600162002aba565b955062001b068a600162002aba565b945062001b158a600262002aba565b935062001b248a600362002aba565b925062001b338a600462002aba565b915033898989898989898962001b4862002b1e565b808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001896000191660001916815260200188600019166000191681526020018760001916600019168152602001866000191660001916815260200185600019166000191681526020018460001916600019168152602001836000191660001916815260200182600019166000191681526020019950505050505050505050604051809103906000f080151562001c0d57600080fd5b905060018e6040518082805190602001908083835b60208310151562001c4a57805182525b60208201915060208101905060208303925062001c22565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480600101828162001c91919062002b2f565b916000526020600020900160005b83909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b5050505050505050505050505050565b62001cfc62002ad1565b600062001d0a8484620018e2565b73ffffffffffffffffffffffffffffffffffffffff16635e6a43116000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001d7657600080fd5b6102c65a03f1151562001d8857600080fd5b50505060405180519050905062001d9f81620028c0565b91505b5092915050565b60008062001db983600162002aba565b915062001dc883600262002aba565b905062001dd68585620018e2565b73ffffffffffffffffffffffffffffffffffffffff16632403d11f83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050600060405180830381600087803b151562001e5c57600080fd5b6102c65a03f1151562001e6e57600080fd5b5050505b5050505050565b600062001e878383620018e2565b73ffffffffffffffffffffffffffffffffffffffff1663ad9914f86000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001ef357600080fd5b6102c65a03f1151562001f0557600080fd5b5050506040518051905090505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141562001fa8576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b62001fb562002ad1565b600062001fc38484620018e2565b73ffffffffffffffffffffffffffffffffffffffff1663675c97696000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200202f57600080fd5b6102c65a03f115156200204157600080fd5b5050506040518051905090506200205881620028c0565b91505b5092915050565b6200206c62002ad1565b60006200207a8484620018e2565b73ffffffffffffffffffffffffffffffffffffffff166366493ac96000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620020e657600080fd5b6102c65a03f11515620020f857600080fd5b5050506040518051905090506200210f81620028c0565b91505b5092915050565b620021258282620018e2565b73ffffffffffffffffffffffffffffffffffffffff166353c98a20336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1515620021bf57600080fd5b6102c65a03f11515620021d157600080fd5b5050505b5050565b620021e362002ad1565b6000620021f18484620018e2565b73ffffffffffffffffffffffffffffffffffffffff166379b4d3796000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200225d57600080fd5b6102c65a03f115156200226f57600080fd5b5050506040518051905090506200228681620028c0565b91505b5092915050565b6200229a62002ad1565b6000620022a88484620018e2565b73ffffffffffffffffffffffffffffffffffffffff1663ae7b6bd96000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200231457600080fd5b6102c65a03f115156200232657600080fd5b5050506040518051905090506200233d81620028c0565b91505b5092915050565b6200235162002ad1565b60006200235f8484620018e2565b73ffffffffffffffffffffffffffffffffffffffff16630d40c8706000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620023cb57600080fd5b6102c65a03f11515620023dd57600080fd5b505050604051805190509050620023f481620028c0565b91505b5092915050565b6200240a8282620018e2565b73ffffffffffffffffffffffffffffffffffffffff1663bcaee25a336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1515620024a457600080fd5b6102c65a03f11515620024b657600080fd5b5050505b5050565b620024c862002ad1565b6000620024d68484620018e2565b73ffffffffffffffffffffffffffffffffffffffff16637a6384ac6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200254257600080fd5b6102c65a03f115156200255457600080fd5b5050506040518051905090506200256b81620028c0565b91505b5092915050565b6200257f62002ad1565b60006200258d8484620018e2565b73ffffffffffffffffffffffffffffffffffffffff1663810bfeda6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620025f957600080fd5b6102c65a03f115156200260b57600080fd5b5050506040518051905090506200262281620028c0565b91505b5092915050565b6200263662002ad1565b6000620026448484620018e2565b73ffffffffffffffffffffffffffffffffffffffff166355b72f386000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620026b057600080fd5b6102c65a03f11515620026c257600080fd5b505050604051805190509050620026d981620028c0565b91505b5092915050565b6000620026f18383620018e2565b73ffffffffffffffffffffffffffffffffffffffff16639041da7e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200275d57600080fd5b6102c65a03f115156200276f57600080fd5b5050506040518051905090505b92915050565b6000620027908383620018e2565b73ffffffffffffffffffffffffffffffffffffffff166391f78e4c6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620027fc57600080fd5b6102c65a03f115156200280e57600080fd5b5050506040518051905090505b92915050565b60006200282f8383620018e2565b73ffffffffffffffffffffffffffffffffffffffff1663050f97496000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200289b57600080fd5b6102c65a03f11515620028ad57600080fd5b5050506040518051905090505b92915050565b620028ca62002ad1565b620028d462002b5e565b6000806000620028e362002b5e565b6020604051805910620028f35750595b908082528060200260200182016040525b50945060009350600092505b6020831015620029d3578260080260020a876001900402600102915060007f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515620029c4578185858151811015156200298b57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535083806001019450505b5b828060010193505062002910565b83604051805910620029e25750595b908082528060200260200182016040525b509050600092505b8383101562002aac57848381518110151562002a1357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002818481518110151562002a6d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8280600101935050620029fb565b8095505b5050505050919050565b6000808260200290508084015191505b5092915050565b602060405190810160405280600081525090565b610c80604051908101604052806064905b60006bffffffffffffffffffffffff191681526020019060019003908162002af65790505090565b604051610d808062002b9b83390190565b81548183558181151162002b595781836000526020600020918201910162002b58919062002b72565b5b505050565b602060405190810160405280600081525090565b62002b9791905b8082111562002b9357600081600090555060010162002b79565b5090565b9056006060604052341561000f57600080fd5b60405161012080610d80833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b8585896000357fffffffff000000000000000000000000000000000000000000000000000000001633600143034060405180876000191660001916815260200186600019166000191681526020018560001916600019168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018260001916600019168152602001965050505050505060405180910390206000806101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055504260018190555088600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550876004816000191690555086600581600019169055506000600660006101000a81548160ff021916908315150217905550856007816000191690555084600881600019169055506000600d60006101000a81548160ff021916908315150217905550836009816000191690555082600a816000191690555081600b816000191690555080600c81600019169055505b5050505050505050505b610ae38061029d6000396000f3006060604052361561011b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063050f9749146101205780630d40c8701461014957806314a506ec1461017a578063188ec356146101a75780632403d11f146101d057806353c98a201461020457806355b72f381461023d5780635d1ca6311461026e5780635e6a4311146102b557806366493ac9146102e6578063675c97691461031757806379b4d379146103485780637a6384ac14610379578063810bfeda146103aa5780639041da7e146103db57806391f78e4c14610408578063ac79152c14610431578063ad9914f814610462578063ae7b6bd9146104b7578063bcaee25a146104e8578063c2b7a25e14610521575b600080fd5b341561012b57600080fd5b61013361054e565b6040518082815260200191505060405180910390f35b341561015457600080fd5b61015c61055c565b60405180826000191660001916815260200191505060405180910390f35b341561018557600080fd5b61018d610567565b604051808215151515815260200191505060405180910390f35b34156101b257600080fd5b6101ba61057f565b6040518082815260200191505060405180910390f35b34156101db57600080fd5b6102026004808035600019169060200190919080356000191690602001909190505061058a565b005b341561020f57600080fd5b61023b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610617565b005b341561024857600080fd5b6102506107cf565b60405180826000191660001916815260200191505060405180910390f35b341561027957600080fd5b6102816107da565b60405180826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200191505060405180910390f35b34156102c057600080fd5b6102c86107fd565b60405180826000191660001916815260200191505060405180910390f35b34156102f157600080fd5b6102f9610808565b60405180826000191660001916815260200191505060405180910390f35b341561032257600080fd5b61032a610813565b60405180826000191660001916815260200191505060405180910390f35b341561035357600080fd5b61035b61081e565b60405180826000191660001916815260200191505060405180910390f35b341561038457600080fd5b61038c610829565b60405180826000191660001916815260200191505060405180910390f35b34156103b557600080fd5b6103bd610834565b60405180826000191660001916815260200191505060405180910390f35b34156103e657600080fd5b6103ee61083f565b604051808215151515815260200191505060405180910390f35b341561041357600080fd5b61041b610857565b6040518082815260200191505060405180910390f35b341561043c57600080fd5b610444610865565b60405180826000191660001916815260200191505060405180910390f35b341561046d57600080fd5b610475610870565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104c257600080fd5b6104ca61089b565b60405180826000191660001916815260200191505060405180910390f35b34156104f357600080fd5b61051f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108a6565b005b341561052c57600080fd5b610534610a4e565b604051808215151515815260200191505060405180910390f35b600060108054905090505b90565b600060045490505b90565b6000600d60009054906101000a900460ff1690505b90565b600060015490505b90565b600660009054906101000a900460ff1615610612576001600d60006101000a81548160ff02191690831515021790555081600e816000191690555080600f816000191690555033600d60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b600080600d60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561067d57506005601080549050105b80156106955750600d60009054906101000a900460ff165b156107c957600091505b601080549050811015610732578273ffffffffffffffffffffffffffffffffffffffff166010828154811015156106d257fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156107245760019150610732565b5b808060010191505061069f565b8115156107c8576010805480600101828161074d9190610a66565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600560108054905014156107c7576001601160006101000a81548160ff0219169083151502179055505b5b5b5b505050565b600060075490505b90565b60008060009054906101000a90046c010000000000000000000000000290505b90565b6000600b5490505b90565b6000600a5490505b90565b600060095490505b90565b600060055490505b90565b6000600f5490505b90565b6000600e5490505b90565b6000600660009054906101000a900460ff1690505b90565b600060038054905090505b90565b6000600c5490505b90565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b600060085490505b90565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156109145750600660009054906101000a900460ff16155b15610a4857600091505b6003805490508110156109b1578273ffffffffffffffffffffffffffffffffffffffff1660038281548110151561095157fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109a357600191506109b1565b5b808060010191505061091e565b811515610a4757600380548060010182816109cc9190610a66565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060056003805490501415610a46576001600660006101000a81548160ff0219169083151502179055505b5b5b5b505050565b6000601160009054906101000a900460ff1690505b90565b815481835581811511610a8d57818360005260206000209182019101610a8c9190610a92565b5b505050565b610ab491905b80821115610ab0576000816000905550600101610a98565b5090565b905600a165627a7a723058207107a7702bc09ebe87c8e8b6e54fd26d91f19ebf2830649607f86f9114024eb50029a165627a7a72305820222efc9edc7c1f1d6fc9b2619fc1f4f449af4bb26c209656c33d6895ffe3e7670029";

    private Report_sol_Repairchain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Report_sol_Repairchain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<Bool> getFixedReport(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedReport", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getTimestamp(Utf8String city, Bytes20 id) {
        Function function = new Function("getTimestamp", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getDescription4(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription4", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<StaticArray<Bytes20>> getReportIdsFromCity(Utf8String city, Uint256 start) {
        Function function = new Function("getReportIdsFromCity", 
                Arrays.<Type>asList(city, start), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray<Bytes20>>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getReportsLengthOfCity(Utf8String city) {
        Function function = new Function("getReportsLengthOfCity", 
                Arrays.<Type>asList(city), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> getEnoughFixConfirmations(Utf8String city, Bytes20 id) {
        Function function = new Function("getEnoughFixConfirmations", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Address> getReport(Utf8String city, Bytes20 id) {
        Function function = new Function("getReport", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addReportToCity(Utf8String city, Utf8String pictureHash, Utf8String longitude, Utf8String latitude, Utf8String description) {
        Function function = new Function("addReportToCity", Arrays.<Type>asList(city, pictureHash, longitude, latitude, description), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getDescription3(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription3", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> reportFix(Utf8String city, Bytes20 id, Utf8String pictureHash) {
        Function function = new Function("reportFix", Arrays.<Type>asList(city, id, pictureHash), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> getReporter(Utf8String city, Bytes20 id) {
        Function function = new Function("getReporter", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> kill() {
        Function function = new Function("kill", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getDescription1(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getDescription2(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addFixConfirmationToReport(Utf8String city, Bytes20 id) {
        Function function = new Function("addFixConfirmationToReport", Arrays.<Type>asList(city, id), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getPictureHash2(Utf8String city, Bytes20 id) {
        Function function = new Function("getPictureHash2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getLatitude(Utf8String city, Bytes20 id) {
        Function function = new Function("getLatitude", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getPictureHash1(Utf8String city, Bytes20 id) {
        Function function = new Function("getPictureHash1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addConfirmationToReport(Utf8String city, Bytes20 id) {
        Function function = new Function("addConfirmationToReport", Arrays.<Type>asList(city, id), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getFixedPictureHash2(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedPictureHash2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getFixedPictureHash1(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedPictureHash1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getLongitude(Utf8String city, Bytes20 id) {
        Function function = new Function("getLongitude", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> getEnoughConfirmations(Utf8String city, Bytes20 id) {
        Function function = new Function("getEnoughConfirmations", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getConfirmationCount(Utf8String city, Bytes20 id) {
        Function function = new Function("getConfirmationCount", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getFixConfirmationCount(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixConfirmationCount", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<Report_sol_Repairchain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Report_sol_Repairchain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Report_sol_Repairchain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Report_sol_Repairchain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Report_sol_Repairchain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Report_sol_Repairchain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Report_sol_Repairchain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Report_sol_Repairchain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
