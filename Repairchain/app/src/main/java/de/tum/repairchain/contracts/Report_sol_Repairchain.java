package de.tum.repairchain.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.0.
 */
public final class Report_sol_Repairchain extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b5b5b60008054600160a060020a03191633600160a060020a03161790555b5b5b61115e8061003e6000396000f3006060604052361561009e5763ffffffff60e060020a60003504166302f20b9c81146100a3578063255334cc146101125780633fd587da1461017757806341c0e1b5146102425780634bc65eb21461025757806357ac1c0e146102ba57806361da83c11461032157806383ee9cf2146103845780639201de55146103f3578063977ae26614610481578063d254b35814610516578063eeec793c146105e1575b600080fd5b34156100ae57600080fd5b6100f660046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061064892505050565b604051600160a060020a03909116815260200160405180910390f35b341561011d57600080fd5b61016560046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050933593506106e692505050565b60405190815260200160405180910390f35b341561018257600080fd5b6101ca60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061075a92505050565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102075780820151818401525b6020016101ee565b50505050905090810190601f1680156102345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024d57600080fd5b6102556107e3565b005b341561026257600080fd5b61016560046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061080b95505050505050565b60405190815260200160405180910390f35b34156102c557600080fd5b61030d60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061081a92505050565b604051901515815260200160405180910390f35b341561032c57600080fd5b61016560046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061089f95505050505050565b60405190815260200160405180910390f35b341561038f57600080fd5b6100f660046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050933593506108ae92505050565b604051600160a060020a03909116815260200160405180910390f35b34156103fe57600080fd5b6101ca600435610922565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102075780820151818401525b6020016101ee565b50505050905090810190601f1680156102345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561048c57600080fd5b61025560046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650610ad295505050505050565b005b341561052157600080fd5b6101ca60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505093359350610bde92505050565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102075780820151818401525b6020016101ee565b50505050905090810190601f1680156102345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105ec57600080fd5b61030d60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505093359350610c6792505050565b604051901515815260200160405180910390f35b60006001836040518082805190602001908083835b6020831061067d57805182525b601f19909201916020918201910161065d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020828154811015156106bd57fe5b906000526020600020900160005b9054906101000a9004600160a060020a031690505b92915050565b60006106f28383610648565b600160a060020a03166391f78e4c6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561073757600080fd5b6102c65a03f1151561074857600080fd5b50505060405180519150505b92915050565b610762610cdb565b600061076e8484610648565b600160a060020a03166379b4d3796000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156107b357600080fd5b6102c65a03f115156107c457600080fd5b5050506040518051905090506107d981610922565b91505b5092915050565b60005433600160a060020a039081169116141561080857600054600160a060020a0316ff5b5b565b6000602082015190505b919050565b60006108268383610648565b600160a060020a031663bcaee25a3360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561073757600080fd5b6102c65a03f1151561074857600080fd5b50505060405180519150505b92915050565b6000604082015190505b919050565b60006108ba8383610648565b600160a060020a031663ad9914f86000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561073757600080fd5b6102c65a03f1151561074857600080fd5b50505060405180519150505b92915050565b61092a610cdb565b610932610cdb565b600080600061093f610cdb565b602060405180591061094e5750595b908082528060200260200182016040525b50945060009350600092505b60208310156109f7576008830260020a870291507fff000000000000000000000000000000000000000000000000000000000000008216156109eb57818585815181106109b457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001909301925b5b60019092019161096b565b83604051805910610a055750595b908082528060200260200182016040525b509050600092505b83831015610ac457848381518110610a3257fe5b01602001517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002818481518110610a8857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b600190920191610a1e565b8095505b5050505050919050565b6000806000610ae08461080b565b9250610aeb8461089f565b9150338383610af8610cff565b600160a060020a039093168352602083019190915260408083019190915260609091019051809103906000f0801515610b3057600080fd5b90506001856040518082805190602001908083835b60208310610b6557805182525b601f199092019160209182019101610b45565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020805460018101610ba98382610d0f565b916000526020600020900160005b8154600160a060020a038086166101009390930a92830292021916179055505b5050505050565b610be6610cdb565b6000610bf28484610648565b600160a060020a0316630d40c8706000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156107b357600080fd5b6102c65a03f115156107c457600080fd5b5050506040518051905090506107d981610922565b91505b5092915050565b6000610c738383610648565b600160a060020a0316639041da7e6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561073757600080fd5b6102c65a03f1151561074857600080fd5b50505060405180519150505b92915050565b60206040519081016040526000815290565b60206040519081016040526000815290565b6040516103d880610d5b83390190565b815481835581811511610d3357600083815260209020610d33918101908301610d39565b5b505050565b610d5791905b80821115610d535760008155600101610d3f565b5090565b9056006060604052341561000f57600080fd5b6040516060806103d88339810160405280805191906020018051919060200180519150505b5a4290810160005560015560028054600160a060020a031916600160a060020a038516179055600482905560058190556006805460ff191690555b5050505b610356806100826000396000f300606060405236156100805763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630d40c87081146100855780635d1ca631146100aa57806379b4d379146100cf5780639041da7e146100f457806391f78e4c1461011b578063ad9914f814610140578063bcaee25a1461016f575b600080fd5b341561009057600080fd5b6100986101a2565b60405190815260200160405180910390f35b34156100b557600080fd5b6100986101a9565b60405190815260200160405180910390f35b34156100da57600080fd5b6100986101b0565b60405190815260200160405180910390f35b34156100ff57600080fd5b6101076101b7565b604051901515815260200160405180910390f35b341561012657600080fd5b6100986101c1565b60405190815260200160405180910390f35b341561014b57600080fd5b6101536101c8565b604051600160a060020a03909116815260200160405180910390f35b341561017a57600080fd5b610107600160a060020a03600435166101d8565b604051901515815260200160405180910390f35b6004545b90565b6000545b90565b6005545b90565b60065460ff165b90565b6003545b90565b600254600160a060020a03165b90565b600080805b6003548110156102415783600160a060020a031660038281548110151561020057fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a031614156102385760019150610241565b5b6001016101dd565b8115801561025d5750600254600160a060020a03858116911614155b801561026c5750600354600590105b156102d257600380546001810161028383826102df565b916000526020600020900160005b8154600160a060020a038089166101009390930a9283029202191617905550600354600514156102c9576006805460ff191660011790555b600192506102d7565b600092505b5b5050919050565b81548183558181151161030357600083815260209020610303918101908301610309565b5b505050565b6101a691905b80821115610323576000815560010161030f565b5090565b905600a165627a7a72305820c22b9d9f6470ed71dd9e8cf8ebd15fd3e81a70ba549cdeceeb48067f2ffb5c3e0029a165627a7a72305820ae679aedce9a45c8d17566b152148fb5d5f1f89db6598184710d6c177189a1ca0029";

    private Report_sol_Repairchain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Report_sol_Repairchain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<Address> getReport(Utf8String city, Uint256 id) {
        Function function = new Function("getReport", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getConfirmationCount(Utf8String city, Uint256 id) {
        Function function = new Function("getConfirmationCount", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getPictureHash2(Utf8String city, Uint256 id) {
        Function function = new Function("getPictureHash2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> kill() {
        Function function = new Function("kill", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> firstStringToBytes32(Utf8String source) {
        Function function = new Function("firstStringToBytes32", Arrays.<Type>asList(source), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addConfirmationToReport(Utf8String city, Uint256 id) {
        Function function = new Function("addConfirmationToReport", Arrays.<Type>asList(city, id), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> secondStringToBytes32(Utf8String source) {
        Function function = new Function("secondStringToBytes32", Arrays.<Type>asList(source), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> getReporter(Utf8String city, Uint256 id) {
        Function function = new Function("getReporter", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> bytes32ToString(Bytes32 x) {
        Function function = new Function("bytes32ToString", 
                Arrays.<Type>asList(x), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addReportToCity(Utf8String city, Utf8String pictureHash) {
        Function function = new Function("addReportToCity", Arrays.<Type>asList(city, pictureHash), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getPictureHash1(Utf8String city, Uint256 id) {
        Function function = new Function("getPictureHash1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> getEnoughConfirmations(Utf8String city, Uint256 id) {
        Function function = new Function("getEnoughConfirmations", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<Report_sol_Repairchain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Report_sol_Repairchain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Report_sol_Repairchain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Report_sol_Repairchain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Report_sol_Repairchain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Report_sol_Repairchain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Report_sol_Repairchain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Report_sol_Repairchain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
