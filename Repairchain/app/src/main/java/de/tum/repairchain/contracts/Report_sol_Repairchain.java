package de.tum.repairchain.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticArray;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.0.
 */
public final class Report_sol_Repairchain extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b5b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b6137d0806100636000396000f3006060604052361562000155576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301d39713146200015a57806304d7e8b814620001ea5780630b7df39314620002df57806310b26fab146200038757806310eb050714620003fb578063131c64ac146200048b5780631bd75ce314620005435780633a08303514620006af5780633b85089914620007a45780633d3426b3146200085f57806341c0e1b514620009175780635e5e1678146200092f578063667e48e71462000a245780636aed72701462000b19578063715fd8701462000b91578063a52d11b91462000c86578063aed003451462000d7b578063ba176d1d1462000e70578063c43a5d231462000ee8578063dc6493bf1462000fdd578063e28d586914620010d2578063e372631a14620011c7578063e9d933fe1462001257578063ec2dcf0f14620012e3575b600080fd5b34156200016657600080fd5b620001d0600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff19169060200190919050506200136f565b604051808215151515815260200191505060405180910390f35b3415620001f657600080fd5b62000260600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff19169060200190919050506200140e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620002a35780820151818401525b60208101905062000285565b50505050905090810190601f168015620002d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415620002eb57600080fd5b62000346600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050620014c5565b6040518082606460200280838360005b83811015620003745780820151818401525b60208101905062000356565b5050505090500191505060405180910390f35b34156200039357600080fd5b620003e5600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505062001690565b6040518082815260200191505060405180910390f35b34156200040757600080fd5b62000471600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff19169060200190919050506200170c565b604051808215151515815260200191505060405180910390f35b34156200049757600080fd5b62000501600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620017ab565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200054f57600080fd5b620006ad600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505062001978565b005b3415620006bb57600080fd5b62000725600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001bbb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620007685780820151818401525b6020810190506200074a565b50505050905090810190601f168015620007965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415620007b057600080fd5b6200085d600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505062001c72565b005b34156200086b57600080fd5b620008d5600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001d42565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200092357600080fd5b6200092d62001de1565b005b34156200093b57600080fd5b620009a5600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001e74565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620009e85780820151818401525b602081019050620009ca565b50505050905090810190601f16801562000a165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000a3057600080fd5b62000a9a600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001f2b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000add5780820151818401525b60208101905062000abf565b50505050905090810190601f16801562000b0b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000b2557600080fd5b62000b8f600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001fe2565b005b341562000b9d57600080fd5b62000c07600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620020a2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000c4a5780820151818401525b60208101905062000c2c565b50505050905090810190601f16801562000c785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000c9257600080fd5b62000cfc600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002159565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000d3f5780820151818401525b60208101905062000d21565b50505050905090810190601f16801562000d6d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000d8757600080fd5b62000df1600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002210565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000e345780820151818401525b60208101905062000e16565b50505050905090810190601f16801562000e625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000e7c57600080fd5b62000ee6600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620022c7565b005b341562000ef457600080fd5b62000f5e600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062002387565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000fa15780820151818401525b60208101905062000f83565b50505050905090810190601f16801562000fcf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000fe957600080fd5b62001053600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff19169060200190919050506200243e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620010965780820151818401525b60208101905062001078565b50505050905090810190601f168015620010c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415620010de57600080fd5b62001148600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620024f5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156200118b5780820151818401525b6020810190506200116d565b50505050905090810190601f168015620011b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415620011d357600080fd5b6200123d600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620025ac565b604051808215151515815260200191505060405180910390f35b34156200126357600080fd5b620012cd600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff19169060200190919050506200264b565b6040518082815260200191505060405180910390f35b3415620012ef57600080fd5b62001359600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620026ea565b6040518082815260200191505060405180910390f35b60006200137d8383620017ab565b73ffffffffffffffffffffffffffffffffffffffff166314a506ec6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620013e957600080fd5b6102c65a03f11515620013fb57600080fd5b5050506040518051905090505b92915050565b620014186200299a565b6000620014268484620017ab565b73ffffffffffffffffffffffffffffffffffffffff1663ac79152c6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200149257600080fd5b6102c65a03f11515620014a457600080fd5b505050604051805190509050620014bb8162002789565b91505b5092915050565b620014cf620029ae565b6000620014db620029ae565b6000806001876040518082805190602001908083835b6020831015156200151957805182525b602082019150602081019050602083039250620014f1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902093506064866064020191506064860290505b8380549050811080156200157157508181105b15620016825783818154811015156200158657fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d1ca6316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200161f57600080fd5b6102c65a03f115156200163157600080fd5b5050506040518051905083826064811015156200164a57fe5b60200201906bffffffffffffffffffffffff191690816bffffffffffffffffffffffff1916815250505b80806001019150506200155e565b8294505b5050505092915050565b60006001826040518082805190602001908083835b602083101515620016cd57805182525b602082019150602081019050602083039250620016a5565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054905090505b919050565b60006200171a8383620017ab565b73ffffffffffffffffffffffffffffffffffffffff1663c2b7a25e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200178657600080fd5b6102c65a03f115156200179857600080fd5b5050506040518051905090505b92915050565b60008060006001856040518082805190602001908083835b602083101515620017eb57805182525b602082019150602081019050602083039250620017c3565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209150600090505b81805490508110156200196f57836bffffffffffffffffffffffff191682828154811015156200185157fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d1ca6316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620018ea57600080fd5b6102c65a03f11515620018fc57600080fd5b505050604051805190506bffffffffffffffffffffffff19161415620019605781818154811015156200192b57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925062001970565b5b808060010191505062001825565b5b505092915050565b6000806000806000806000806000620019938d600162002983565b9850620019a28d600262002983565b9750620019b18c600162002983565b9650620019c08b600162002983565b9550620019cf8a600162002983565b9450620019de8a600262002983565b9350620019ed8a600362002983565b9250620019fc8a600462002983565b915033898989898989898962001a11620029e7565b808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001896000191660001916815260200188600019166000191681526020018760001916600019168152602001866000191660001916815260200185600019166000191681526020018460001916600019168152602001836000191660001916815260200182600019166000191681526020019950505050505050505050604051809103906000f080151562001ad657600080fd5b905060018e6040518082805190602001908083835b60208310151562001b1357805182525b60208201915060208101905060208303925062001aeb565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480600101828162001b5a9190620029f8565b916000526020600020900160005b83909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b5050505050505050505050505050565b62001bc56200299a565b600062001bd38484620017ab565b73ffffffffffffffffffffffffffffffffffffffff16635e6a43116000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001c3f57600080fd5b6102c65a03f1151562001c5157600080fd5b50505060405180519050905062001c688162002789565b91505b5092915050565b60008062001c8283600162002983565b915062001c9183600262002983565b905062001c9f8585620017ab565b73ffffffffffffffffffffffffffffffffffffffff16632403d11f83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050600060405180830381600087803b151562001d2557600080fd5b6102c65a03f1151562001d3757600080fd5b5050505b5050505050565b600062001d508383620017ab565b73ffffffffffffffffffffffffffffffffffffffff1663ad9914f86000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001dbc57600080fd5b6102c65a03f1151562001dce57600080fd5b5050506040518051905090505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141562001e71576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b62001e7e6200299a565b600062001e8c8484620017ab565b73ffffffffffffffffffffffffffffffffffffffff1663675c97696000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001ef857600080fd5b6102c65a03f1151562001f0a57600080fd5b50505060405180519050905062001f218162002789565b91505b5092915050565b62001f356200299a565b600062001f438484620017ab565b73ffffffffffffffffffffffffffffffffffffffff166366493ac96000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001faf57600080fd5b6102c65a03f1151562001fc157600080fd5b50505060405180519050905062001fd88162002789565b91505b5092915050565b62001fee8282620017ab565b73ffffffffffffffffffffffffffffffffffffffff166353c98a20336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15156200208857600080fd5b6102c65a03f115156200209a57600080fd5b5050505b5050565b620020ac6200299a565b6000620020ba8484620017ab565b73ffffffffffffffffffffffffffffffffffffffff166379b4d3796000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200212657600080fd5b6102c65a03f115156200213857600080fd5b5050506040518051905090506200214f8162002789565b91505b5092915050565b620021636200299a565b6000620021718484620017ab565b73ffffffffffffffffffffffffffffffffffffffff1663ae7b6bd96000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620021dd57600080fd5b6102c65a03f11515620021ef57600080fd5b505050604051805190509050620022068162002789565b91505b5092915050565b6200221a6200299a565b6000620022288484620017ab565b73ffffffffffffffffffffffffffffffffffffffff16630d40c8706000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200229457600080fd5b6102c65a03f11515620022a657600080fd5b505050604051805190509050620022bd8162002789565b91505b5092915050565b620022d38282620017ab565b73ffffffffffffffffffffffffffffffffffffffff1663bcaee25a336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15156200236d57600080fd5b6102c65a03f115156200237f57600080fd5b5050505b5050565b620023916200299a565b60006200239f8484620017ab565b73ffffffffffffffffffffffffffffffffffffffff16637a6384ac6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200240b57600080fd5b6102c65a03f115156200241d57600080fd5b505050604051805190509050620024348162002789565b91505b5092915050565b620024486200299a565b6000620024568484620017ab565b73ffffffffffffffffffffffffffffffffffffffff1663810bfeda6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620024c257600080fd5b6102c65a03f11515620024d457600080fd5b505050604051805190509050620024eb8162002789565b91505b5092915050565b620024ff6200299a565b60006200250d8484620017ab565b73ffffffffffffffffffffffffffffffffffffffff166355b72f386000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200257957600080fd5b6102c65a03f115156200258b57600080fd5b505050604051805190509050620025a28162002789565b91505b5092915050565b6000620025ba8383620017ab565b73ffffffffffffffffffffffffffffffffffffffff16639041da7e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200262657600080fd5b6102c65a03f115156200263857600080fd5b5050506040518051905090505b92915050565b6000620026598383620017ab565b73ffffffffffffffffffffffffffffffffffffffff166391f78e4c6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620026c557600080fd5b6102c65a03f11515620026d757600080fd5b5050506040518051905090505b92915050565b6000620026f88383620017ab565b73ffffffffffffffffffffffffffffffffffffffff1663050f97496000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200276457600080fd5b6102c65a03f115156200277657600080fd5b5050506040518051905090505b92915050565b620027936200299a565b6200279d62002a27565b6000806000620027ac62002a27565b6020604051805910620027bc5750595b908082528060200260200182016040525b50945060009350600092505b60208310156200289c578260080260020a876001900402600102915060007f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415156200288d578185858151811015156200285457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535083806001019450505b5b8280600101935050620027d9565b83604051805910620028ab5750595b908082528060200260200182016040525b509050600092505b8383101562002975578483815181101515620028dc57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000281848151811015156200293657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8280600101935050620028c4565b8095505b5050505050919050565b6000808260200290508084015191505b5092915050565b602060405190810160405280600081525090565b610c80604051908101604052806064905b60006bffffffffffffffffffffffff1916815260200190600190039081620029bf5790505090565b604051610d418062002a6483390190565b81548183558181151162002a225781836000526020600020918201910162002a21919062002a3b565b5b505050565b602060405190810160405280600081525090565b62002a6091905b8082111562002a5c57600081600090555060010162002a42565b5090565b9056006060604052341561000f57600080fd5b60405161012080610d41833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b8585896000357fffffffff000000000000000000000000000000000000000000000000000000001633600143034060405180876000191660001916815260200186600019166000191681526020018560001916600019168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018260001916600019168152602001965050505050505060405180910390206000806101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055504260018190555088600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550876004816000191690555086600581600019169055506000600660006101000a81548160ff021916908315150217905550856007816000191690555084600881600019169055506000600d60006101000a81548160ff021916908315150217905550836009816000191690555082600a816000191690555081600b816000191690555080600c81600019169055505b5050505050505050505b610aa48061029d6000396000f30060606040523615610110576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063050f9749146101155780630d40c8701461013e57806314a506ec1461016f5780632403d11f1461019c57806353c98a20146101d057806355b72f38146102095780635d1ca6311461023a5780635e6a43111461028157806366493ac9146102b2578063675c9769146102e357806379b4d379146103145780637a6384ac14610345578063810bfeda146103765780639041da7e146103a757806391f78e4c146103d4578063ac79152c146103fd578063ad9914f81461042e578063ae7b6bd914610483578063bcaee25a146104b4578063c2b7a25e146104ed575b600080fd5b341561012057600080fd5b61012861051a565b6040518082815260200191505060405180910390f35b341561014957600080fd5b610151610528565b60405180826000191660001916815260200191505060405180910390f35b341561017a57600080fd5b610182610533565b604051808215151515815260200191505060405180910390f35b34156101a757600080fd5b6101ce6004808035600019169060200190919080356000191690602001909190505061054b565b005b34156101db57600080fd5b610207600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506105d8565b005b341561021457600080fd5b61021c610790565b60405180826000191660001916815260200191505060405180910390f35b341561024557600080fd5b61024d61079b565b60405180826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200191505060405180910390f35b341561028c57600080fd5b6102946107be565b60405180826000191660001916815260200191505060405180910390f35b34156102bd57600080fd5b6102c56107c9565b60405180826000191660001916815260200191505060405180910390f35b34156102ee57600080fd5b6102f66107d4565b60405180826000191660001916815260200191505060405180910390f35b341561031f57600080fd5b6103276107df565b60405180826000191660001916815260200191505060405180910390f35b341561035057600080fd5b6103586107ea565b60405180826000191660001916815260200191505060405180910390f35b341561038157600080fd5b6103896107f5565b60405180826000191660001916815260200191505060405180910390f35b34156103b257600080fd5b6103ba610800565b604051808215151515815260200191505060405180910390f35b34156103df57600080fd5b6103e7610818565b6040518082815260200191505060405180910390f35b341561040857600080fd5b610410610826565b60405180826000191660001916815260200191505060405180910390f35b341561043957600080fd5b610441610831565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048e57600080fd5b61049661085c565b60405180826000191660001916815260200191505060405180910390f35b34156104bf57600080fd5b6104eb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610867565b005b34156104f857600080fd5b610500610a0f565b604051808215151515815260200191505060405180910390f35b600060108054905090505b90565b600060045490505b90565b6000600d60009054906101000a900460ff1690505b90565b600660009054906101000a900460ff16156105d3576001600d60006101000a81548160ff02191690831515021790555081600e816000191690555080600f816000191690555033600d60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b600080600d60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561063e57506005601080549050105b80156106565750600d60009054906101000a900460ff165b1561078a57600091505b6010805490508110156106f3578273ffffffffffffffffffffffffffffffffffffffff1660108281548110151561069357fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106e557600191506106f3565b5b8080600101915050610660565b811515610789576010805480600101828161070e9190610a27565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060056010805490501415610788576001601160006101000a81548160ff0219169083151502179055505b5b5b5b505050565b600060075490505b90565b60008060009054906101000a90046c010000000000000000000000000290505b90565b6000600b5490505b90565b6000600a5490505b90565b600060095490505b90565b600060055490505b90565b6000600f5490505b90565b6000600e5490505b90565b6000600660009054906101000a900460ff1690505b90565b600060038054905090505b90565b6000600c5490505b90565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b600060085490505b90565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156108d55750600660009054906101000a900460ff16155b15610a0957600091505b600380549050811015610972578273ffffffffffffffffffffffffffffffffffffffff1660038281548110151561091257fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109645760019150610972565b5b80806001019150506108df565b811515610a08576003805480600101828161098d9190610a27565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060056003805490501415610a07576001600660006101000a81548160ff0219169083151502179055505b5b5b5b505050565b6000601160009054906101000a900460ff1690505b90565b815481835581811511610a4e57818360005260206000209182019101610a4d9190610a53565b5b505050565b610a7591905b80821115610a71576000816000905550600101610a59565b5090565b905600a165627a7a723058208cda0e64cd53aff8b1f10ac435815918c6800447d1447f4dc9b23db813f5597b0029a165627a7a723058206ac7c7bd7ee094899087bfd8a0a4eb670820af4d51acf6346df6ee14bf2192be0029";

    private Report_sol_Repairchain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Report_sol_Repairchain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<Bool> getFixedReport(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedReport", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getDescription4(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription4", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<StaticArray<Bytes20>> getReportIdsFromCity(Utf8String city, Uint256 start) {
        Function function = new Function("getReportIdsFromCity", 
                Arrays.<Type>asList(city, start), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray<Bytes20>>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getReportsLengthOfCity(Utf8String city) {
        Function function = new Function("getReportsLengthOfCity", 
                Arrays.<Type>asList(city), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> getEnoughFixConfirmations(Utf8String city, Bytes20 id) {
        Function function = new Function("getEnoughFixConfirmations", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Address> getReport(Utf8String city, Bytes20 id) {
        Function function = new Function("getReport", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addReportToCity(Utf8String city, Utf8String pictureHash, Utf8String longitude, Utf8String latitude, Utf8String description) {
        Function function = new Function("addReportToCity", Arrays.<Type>asList(city, pictureHash, longitude, latitude, description), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getDescription3(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription3", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> reportFix(Utf8String city, Bytes20 id, Utf8String pictureHash) {
        Function function = new Function("reportFix", Arrays.<Type>asList(city, id, pictureHash), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> getReporter(Utf8String city, Bytes20 id) {
        Function function = new Function("getReporter", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> kill() {
        Function function = new Function("kill", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getDescription1(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getDescription2(Utf8String city, Bytes20 id) {
        Function function = new Function("getDescription2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addFixConfirmationToReport(Utf8String city, Bytes20 id) {
        Function function = new Function("addFixConfirmationToReport", Arrays.<Type>asList(city, id), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getPictureHash2(Utf8String city, Bytes20 id) {
        Function function = new Function("getPictureHash2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getLatitude(Utf8String city, Bytes20 id) {
        Function function = new Function("getLatitude", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getPictureHash1(Utf8String city, Bytes20 id) {
        Function function = new Function("getPictureHash1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addConfirmationToReport(Utf8String city, Bytes20 id) {
        Function function = new Function("addConfirmationToReport", Arrays.<Type>asList(city, id), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getFixedPictureHash2(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedPictureHash2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getFixedPictureHash1(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedPictureHash1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getLongitude(Utf8String city, Bytes20 id) {
        Function function = new Function("getLongitude", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> getEnoughConfirmations(Utf8String city, Bytes20 id) {
        Function function = new Function("getEnoughConfirmations", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getConfirmationCount(Utf8String city, Bytes20 id) {
        Function function = new Function("getConfirmationCount", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getFixConfirmationCount(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixConfirmationCount", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<Report_sol_Repairchain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Report_sol_Repairchain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Report_sol_Repairchain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Report_sol_Repairchain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Report_sol_Repairchain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Report_sol_Repairchain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Report_sol_Repairchain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Report_sol_Repairchain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
