package de.tum.repairchain.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticArray;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.0.
 */
public final class Report_sol_Repairchain extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b5b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b612eb0806100636000396000f3006060604052361562000125576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301d39713146200012a5780630b7df39314620001ba57806310b26fab146200026257806310eb050714620002d6578063131c64ac14620003665780633b850899146200041e5780633d3426b314620004d95780633d851fa2146200059157806341c0e1b514620006ba5780636aed727014620006d2578063715fd870146200074a578063a52d11b9146200083f578063aed003451462000934578063ba176d1d1462000a29578063c43a5d231462000aa1578063dc6493bf1462000b96578063e28d58691462000c8b578063e372631a1462000d80578063e9d933fe1462000e10578063ec2dcf0f1462000e9c575b600080fd5b34156200013657600080fd5b620001a0600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062000f28565b604051808215151515815260200191505060405180910390f35b3415620001c657600080fd5b62000221600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190505062000fc7565b6040518082606460200280838360005b838110156200024f5780820151818401525b60208101905062000231565b5050505090500191505060405180910390f35b34156200026e57600080fd5b620002c0600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505062001192565b6040518082815260200191505060405180910390f35b3415620002e257600080fd5b6200034c600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff19169060200190919050506200120e565b604051808215151515815260200191505060405180910390f35b34156200037257600080fd5b620003dc600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620012ad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200042a57600080fd5b620004d7600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506200147a565b005b3415620004e557600080fd5b6200054f600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001546565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200059d57600080fd5b620006b8600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050620015e5565b005b3415620006c657600080fd5b620006d062001799565b005b3415620006de57600080fd5b62000748600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff19169060200190919050506200182c565b005b34156200075657600080fd5b620007c0600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620018ec565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620008035780820151818401525b602081019050620007e5565b50505050905090810190601f168015620008315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200084b57600080fd5b620008b5600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091905050620019a3565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620008f85780820151818401525b602081019050620008da565b50505050905090810190601f168015620009265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200094057600080fd5b620009aa600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001a5a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620009ed5780820151818401525b602081019050620009cf565b50505050905090810190601f16801562000a1b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000a3557600080fd5b62000a9f600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001b11565b005b341562000aad57600080fd5b62000b17600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001bd1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000b5a5780820151818401525b60208101905062000b3c565b50505050905090810190601f16801562000b885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000ba257600080fd5b62000c0c600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001c88565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000c4f5780820151818401525b60208101905062000c31565b50505050905090810190601f16801562000c7d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000c9757600080fd5b62000d01600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001d3f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000d445780820151818401525b60208101905062000d26565b50505050905090810190601f16801562000d725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341562000d8c57600080fd5b62000df6600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001df6565b604051808215151515815260200191505060405180910390f35b341562000e1c57600080fd5b62000e86600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001e95565b6040518082815260200191505060405180910390f35b341562000ea857600080fd5b62000f12600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff191690602001909190505062001f34565b6040518082815260200191505060405180910390f35b600062000f368383620012ad565b73ffffffffffffffffffffffffffffffffffffffff166314a506ec6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562000fa257600080fd5b6102c65a03f1151562000fb457600080fd5b5050506040518051905090505b92915050565b62000fd1620021eb565b600062000fdd620021eb565b6000806001876040518082805190602001908083835b6020831015156200101b57805182525b60208201915060208101905060208303925062000ff3565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902093506064866064020191506064860290505b8380549050811080156200107357508181105b15620011845783818154811015156200108857fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d1ca6316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200112157600080fd5b6102c65a03f115156200113357600080fd5b5050506040518051905083826064811015156200114c57fe5b60200201906bffffffffffffffffffffffff191690816bffffffffffffffffffffffff1916815250505b808060010191505062001060565b8294505b5050505092915050565b60006001826040518082805190602001908083835b602083101515620011cf57805182525b602082019150602081019050602083039250620011a7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054905090505b919050565b60006200121c8383620012ad565b73ffffffffffffffffffffffffffffffffffffffff1663c2b7a25e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200128857600080fd5b6102c65a03f115156200129a57600080fd5b5050506040518051905090505b92915050565b60008060006001856040518082805190602001908083835b602083101515620012ed57805182525b602082019150602081019050602083039250620012c5565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209150600090505b81805490508110156200147157836bffffffffffffffffffffffff191682828154811015156200135357fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d1ca6316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620013ec57600080fd5b6102c65a03f11515620013fe57600080fd5b505050604051805190506bffffffffffffffffffffffff19161415620014625781818154811015156200142d57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925062001472565b5b808060010191505062001327565b5b505092915050565b600080620014888362001fd3565b9150620014958362001fe2565b9050620014a38585620012ad565b73ffffffffffffffffffffffffffffffffffffffff16632403d11f83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050600060405180830381600087803b15156200152957600080fd5b6102c65a03f115156200153b57600080fd5b5050505b5050505050565b6000620015548383620012ad565b73ffffffffffffffffffffffffffffffffffffffff1663ad9914f86000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620015c057600080fd5b6102c65a03f11515620015d257600080fd5b5050506040518051905090505b92915050565b6000806000806000620015f88862001fd3565b9450620016058862001fe2565b9350620016128762001fd3565b92506200161f8662001fd3565b915033858585856200163062002224565b808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001856000191660001916815260200184600019166000191681526020018360001916600019168152602001826000191660001916815260200195505050505050604051809103906000f0801515620016b957600080fd5b90506001896040518082805190602001908083835b602083101515620016f657805182525b602082019150602081019050602083039250620016ce565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902080548060010182816200173d919062002235565b916000526020600020900160005b83909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141562001829576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b620018388282620012ad565b73ffffffffffffffffffffffffffffffffffffffff166353c98a20336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1515620018d257600080fd5b6102c65a03f11515620018e457600080fd5b5050505b5050565b620018f662002264565b6000620019048484620012ad565b73ffffffffffffffffffffffffffffffffffffffff166379b4d3796000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200197057600080fd5b6102c65a03f115156200198257600080fd5b505050604051805190509050620019998162001ff1565b91505b5092915050565b620019ad62002264565b6000620019bb8484620012ad565b73ffffffffffffffffffffffffffffffffffffffff1663ae7b6bd96000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001a2757600080fd5b6102c65a03f1151562001a3957600080fd5b50505060405180519050905062001a508162001ff1565b91505b5092915050565b62001a6462002264565b600062001a728484620012ad565b73ffffffffffffffffffffffffffffffffffffffff16630d40c8706000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001ade57600080fd5b6102c65a03f1151562001af057600080fd5b50505060405180519050905062001b078162001ff1565b91505b5092915050565b62001b1d8282620012ad565b73ffffffffffffffffffffffffffffffffffffffff1663bcaee25a336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b151562001bb757600080fd5b6102c65a03f1151562001bc957600080fd5b5050505b5050565b62001bdb62002264565b600062001be98484620012ad565b73ffffffffffffffffffffffffffffffffffffffff16637a6384ac6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001c5557600080fd5b6102c65a03f1151562001c6757600080fd5b50505060405180519050905062001c7e8162001ff1565b91505b5092915050565b62001c9262002264565b600062001ca08484620012ad565b73ffffffffffffffffffffffffffffffffffffffff1663810bfeda6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001d0c57600080fd5b6102c65a03f1151562001d1e57600080fd5b50505060405180519050905062001d358162001ff1565b91505b5092915050565b62001d4962002264565b600062001d578484620012ad565b73ffffffffffffffffffffffffffffffffffffffff166355b72f386000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001dc357600080fd5b6102c65a03f1151562001dd557600080fd5b50505060405180519050905062001dec8162001ff1565b91505b5092915050565b600062001e048383620012ad565b73ffffffffffffffffffffffffffffffffffffffff16639041da7e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001e7057600080fd5b6102c65a03f1151562001e8257600080fd5b5050506040518051905090505b92915050565b600062001ea38383620012ad565b73ffffffffffffffffffffffffffffffffffffffff166391f78e4c6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001f0f57600080fd5b6102c65a03f1151562001f2157600080fd5b5050506040518051905090505b92915050565b600062001f428383620012ad565b73ffffffffffffffffffffffffffffffffffffffff1663050f97496000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151562001fae57600080fd5b6102c65a03f1151562001fc057600080fd5b5050506040518051905090505b92915050565b6000602082015190505b919050565b6000604082015190505b919050565b62001ffb62002264565b6200200562002278565b60008060006200201462002278565b6020604051805910620020245750595b908082528060200260200182016040525b50945060009350600092505b602083101562002104578260080260020a876001900402600102915060007f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515620020f557818585815181101515620020bc57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535083806001019450505b5b828060010193505062002041565b83604051805910620021135750595b908082528060200260200182016040525b509050600092505b83831015620021dd5784838151811015156200214457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000281848151811015156200219e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b82806001019350506200212c565b8095505b5050505050919050565b610c80604051908101604052806064905b60006bffffffffffffffffffffffff1916815260200190600190039081620021fc5790505090565b604051610bd080620022b583390190565b8154818355818115116200225f578183600052602060002091820191016200225e91906200228c565b5b505050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b620022b191905b80821115620022ad57600081600090555060010162002293565b5090565b9056006060604052341561000f57600080fd5b60405160a080610bd0833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b8181856000357fffffffff000000000000000000000000000000000000000000000000000000001633600143034060405180876000191660001916815260200186600019166000191681526020018560001916600019168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018260001916600019168152602001965050505050505060405180910390206000806101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055504260018190555084600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836004816000191690555082600581600019169055506000600660006101000a81548160ff021916908315150217905550816007816000191690555080600881600019169055506000600960006101000a81548160ff0219169083151502179055505b50505050505b610988806102486000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063050f9749146100e95780630d40c8701461011257806314a506ec146101435780632403d11f1461017057806353c98a20146101a457806355b72f38146101dd5780635d1ca6311461020e57806379b4d379146102555780637a6384ac14610286578063810bfeda146102b75780639041da7e146102e857806391f78e4c14610315578063ad9914f81461033e578063ae7b6bd914610393578063bcaee25a146103c4578063c2b7a25e146103fd575b600080fd5b34156100f457600080fd5b6100fc61042a565b6040518082815260200191505060405180910390f35b341561011d57600080fd5b610125610438565b60405180826000191660001916815260200191505060405180910390f35b341561014e57600080fd5b610156610443565b604051808215151515815260200191505060405180910390f35b341561017b57600080fd5b6101a26004808035600019169060200190919080356000191690602001909190505061045b565b005b34156101af57600080fd5b6101db600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506104e8565b005b34156101e857600080fd5b6101f06106a0565b60405180826000191660001916815260200191505060405180910390f35b341561021957600080fd5b6102216106ab565b60405180826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200191505060405180910390f35b341561026057600080fd5b6102686106ce565b60405180826000191660001916815260200191505060405180910390f35b341561029157600080fd5b6102996106d9565b60405180826000191660001916815260200191505060405180910390f35b34156102c257600080fd5b6102ca6106e4565b60405180826000191660001916815260200191505060405180910390f35b34156102f357600080fd5b6102fb6106ef565b604051808215151515815260200191505060405180910390f35b341561032057600080fd5b610328610707565b6040518082815260200191505060405180910390f35b341561034957600080fd5b610351610715565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561039e57600080fd5b6103a6610740565b60405180826000191660001916815260200191505060405180910390f35b34156103cf57600080fd5b6103fb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061074b565b005b341561040857600080fd5b6104106108f3565b604051808215151515815260200191505060405180910390f35b6000600c8054905090505b90565b600060045490505b90565b6000600960009054906101000a900460ff1690505b90565b600660009054906101000a900460ff16156104e3576001600960006101000a81548160ff02191690831515021790555081600a816000191690555080600b816000191690555033600960016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b600080600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561054e57506005600c80549050105b80156105665750600960009054906101000a900460ff165b1561069a57600091505b600c80549050811015610603578273ffffffffffffffffffffffffffffffffffffffff16600c828154811015156105a357fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156105f55760019150610603565b5b8080600101915050610570565b81151561069957600c805480600101828161061e919061090b565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506005600c805490501415610698576001600d60006101000a81548160ff0219169083151502179055505b5b5b5b505050565b600060075490505b90565b60008060009054906101000a90046c010000000000000000000000000290505b90565b600060055490505b90565b6000600b5490505b90565b6000600a5490505b90565b6000600660009054906101000a900460ff1690505b90565b600060038054905090505b90565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b600060085490505b90565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156107b95750600660009054906101000a900460ff16155b156108ed57600091505b600380549050811015610856578273ffffffffffffffffffffffffffffffffffffffff166003828154811015156107f657fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108485760019150610856565b5b80806001019150506107c3565b8115156108ec5760038054806001018281610871919061090b565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600560038054905014156108eb576001600660006101000a81548160ff0219169083151502179055505b5b5b5b505050565b6000600d60009054906101000a900460ff1690505b90565b815481835581811511610932578183600052602060002091820191016109319190610937565b5b505050565b61095991905b8082111561095557600081600090555060010161093d565b5090565b905600a165627a7a72305820c135939d30ad6cd2c86735e3e37d841240193f0590e59594bc196dc07765535c0029a165627a7a7230582025a5bba1b8a9eb67dfe2bbc89136bbd9ef435d8f88d41239f040a8fe5790a3350029";

    private Report_sol_Repairchain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Report_sol_Repairchain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<Bool> getFixedReport(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedReport", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<StaticArray<Bytes20>> getReportIdsFromCity(Utf8String city, Uint256 start) {
        Function function = new Function("getReportIdsFromCity", 
                Arrays.<Type>asList(city, start), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray<Bytes20>>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getReportsLengthOfCity(Utf8String city) {
        Function function = new Function("getReportsLengthOfCity", 
                Arrays.<Type>asList(city), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> getEnoughFixConfirmations(Utf8String city, Bytes20 id) {
        Function function = new Function("getEnoughFixConfirmations", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Address> getReport(Utf8String city, Bytes20 id) {
        Function function = new Function("getReport", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> reportFix(Utf8String city, Bytes20 id, Utf8String pictureHash) {
        Function function = new Function("reportFix", Arrays.<Type>asList(city, id, pictureHash), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> getReporter(Utf8String city, Bytes20 id) {
        Function function = new Function("getReporter", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addReportToCity(Utf8String city, Utf8String pictureHash, Utf8String longitude, Utf8String latitude) {
        Function function = new Function("addReportToCity", Arrays.<Type>asList(city, pictureHash, longitude, latitude), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> kill() {
        Function function = new Function("kill", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addFixConfirmationToReport(Utf8String city, Bytes20 id) {
        Function function = new Function("addFixConfirmationToReport", Arrays.<Type>asList(city, id), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getPictureHash2(Utf8String city, Bytes20 id) {
        Function function = new Function("getPictureHash2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getLatitude(Utf8String city, Bytes20 id) {
        Function function = new Function("getLatitude", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getPictureHash1(Utf8String city, Bytes20 id) {
        Function function = new Function("getPictureHash1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addConfirmationToReport(Utf8String city, Bytes20 id) {
        Function function = new Function("addConfirmationToReport", Arrays.<Type>asList(city, id), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getFixedPictureHash2(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedPictureHash2", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getFixedPictureHash1(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixedPictureHash1", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getLongitude(Utf8String city, Bytes20 id) {
        Function function = new Function("getLongitude", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> getEnoughConfirmations(Utf8String city, Bytes20 id) {
        Function function = new Function("getEnoughConfirmations", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getConfirmationCount(Utf8String city, Bytes20 id) {
        Function function = new Function("getConfirmationCount", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getFixConfirmationCount(Utf8String city, Bytes20 id) {
        Function function = new Function("getFixConfirmationCount", 
                Arrays.<Type>asList(city, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<Report_sol_Repairchain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Report_sol_Repairchain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Report_sol_Repairchain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Report_sol_Repairchain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Report_sol_Repairchain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Report_sol_Repairchain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Report_sol_Repairchain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Report_sol_Repairchain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
